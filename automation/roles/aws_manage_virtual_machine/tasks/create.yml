---
- name: create vpc to work in
  amazon.aws.ec2_vpc_net:
    cidr_block: "{{ aws_vpc_cidr }}"
    name: "{{ aws_vpc_name }}"
    state: present
  register: _vpc

- name: Create a Public Subnet
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ _vpc.vpc.id }}"
    cidr: "{{ aws_subnet_cidr }}"
  register: _subnet

- name: Create internet gateway attached to the VPC
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ _vpc.vpc.id }}"
    state: present
  register: _gateway

- name: Create Route table for internet gateway (public subnet)
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ _vpc.vpc.id }}"
    subnets:
      - "{{ _subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ _gateway.gateway_id }}"
    lookup: tag
    resource_tags: "{{ aws_internet_gw_tags }}"
    state: present

- name: Create security group
  amazon.aws.ec2_security_group:
    name: "{{ aws_security_group }}"
    vpc_id: "{{ _vpc.vpc.id }}"
    description: Security group for ec2 instance
    rules: "{{ aws_security_group_rules }}"
    rules_egress:
      - cidr_ip: 0.0.0.0/0
        proto: -1
    state: present
  register: _security_group

- name: Create EC2 key pair
  amazon.aws.ec2_key:
    name: "{{ aws_key_pair }}"
    # key_material: "{{ lookup('file', 'aws_ec2_rsa.pub') }}"
    key_material: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

- name: Get image ID to create an instance
  amazon.aws.ec2_ami_info:
    filters: "{{ aws_ec2_ami_filters }}"
  register: _amis
  no_log: true

- name: Create a virtual machine
  amazon.aws.ec2_instance:
    name: "{{ aws_ec2_name }}"
    instance_type: "t2.medium"
    image_id: "{{ _amis.images.0.image_id }}"
    key_name: "{{ aws_key_pair }}"
    subnet_id: "{{ _subnet.subnet.id }}"
    network:
      assign_public_ip: true
      groups:
        - "{{ _security_group.group_id }}"
    security_groups:
      - "{{ _security_group.group_id }}"
    wait: true
    state: started
